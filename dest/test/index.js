"use strict";
var index_1 = require('../src/index');
var async = require('async');
var ava_1 = require('ava');
function promiseErr(err) {
    return new Promise(function (resolve, reject) {
        reject(err);
    });
}
function promiseValue(v) {
    return new Promise(function (resolve) {
        resolve(v);
    });
}
ava_1.default('objectParamsToParams wont break', function (t) {
    t.deepEqual(index_1.objectParamsToParams(['a'], null), [undefined]);
    t.deepEqual(index_1.objectParamsToParams(['a'], undefined), [undefined]);
    t.deepEqual(index_1.objectParamsToParams(['a'], 'abc'), [undefined]);
    t.deepEqual(index_1.objectParamsToParams(['a'], 1), [undefined]);
});
ava_1.default('objectParamsToParams can flatten an object', function (t) {
    t.deepEqual(index_1.objectParamsToParams(['a', 'b'], { a: 1, b: 2 }), [1, 2]);
});
ava_1.default.cb('makeAsyncAutoTaskSpec returns function for async.auto', function (t) {
    var ar = index_1.makeAsyncAutoTaskSpec(['a', 'b'], function readFiles(aFile, bFile, next) {
        t.is(aFile, 'x');
        t.is(bFile, 'y');
        next(1, 2);
    });
    t.is(ar[0], 'a');
    t.is(ar[1], 'b');
    var func = ar[2];
    func({ a: 'x', b: 'y' }, function (a, b) {
        t.is(a, 1);
        t.is(b, 2);
        t.end();
    });
});
ava_1.default.cb('promiseToCallback converts a promise returner to callback', function (t) {
    function promiseFunc(a, b) {
        return new Promise(function (resolve) {
            setTimeout(function () {
                resolve(a + b);
            }, 5);
        });
    }
    var cbFunc = index_1.promiseToCallback(promiseFunc);
    cbFunc(1, 2, function (err, result) {
        t.is(err, null);
        t.is(result, 3);
        t.end();
    });
});
ava_1.default.cb('promiseToCallback converts a promise returner to callback', function (t) {
    function promiseFunc(a) {
        return promiseErr(a + 1);
    }
    var cbFunc = index_1.promiseToCallback(promiseFunc);
    cbFunc(1, function (err, result) {
        t.is(err, 2);
        t.is(arguments.length, 1);
        t.end();
    });
});
ava_1.default.cb('promiseToCallback passes through a non-promise', function (t) {
    function normalFunc(a) {
        return a + 1;
    }
    var cbFunc = index_1.promiseToCallback(normalFunc);
    cbFunc(1, function (err, result) {
        t.is(err, null);
        t.is(arguments.length, 2);
        t.end();
    });
});
ava_1.default.cb('makeAsyncAutoHandlerFunc also converts to params', function (t) {
    var func = index_1.makeAsyncAutoHandlerFunc(['a', 'b'], function readFiles(err, aFile, bFile) {
        t.is(err, null);
        t.is(aFile, 'x');
        t.is(bFile, 'y');
        t.end();
    });
    func(null, { a: 'x', b: 'y' });
});
ava_1.default.cb('async.auto full test', function (t) {
    async.auto({
        a: function (next) { next(null, 1); },
        b: index_1.makeAsyncAutoTaskSpec(['a'], function (a, next) {
            next(null, a + 1);
        }),
        c: index_1.makeAsyncAutoTaskSpec(['b'], index_1.promiseToCallback(function (b) {
            return new Promise(function (resolve) {
                resolve(b + 2);
            });
        })),
        d: index_1.makeAsyncAutoTaskSpecP(['c'], function (c) {
            return c + 4;
        }),
        e: index_1.makeAsyncAutoTaskSpecP(['c', 'd'], function (c, d) {
            return new Promise(function (resolve) {
                resolve(c + d);
            });
        })
    }, 9, index_1.makeAsyncAutoHandlerFunc(['c', 'd', 'e'], function (err, c, d, e) {
        t.is(err, null);
        t.is(c, 4);
        t.is(d, 8);
        t.is(e, 12);
        t.end();
    }));
});
ava_1.default('asyncAutoPromise full success test', function (t) {
    var autoStruct = {
        a: function (next) { next(null, 1); },
        b: index_1.makeAsyncAutoTaskSpec(['a'], function (a, next) {
            next(null, a + 1);
        }),
        c: index_1.makeAsyncAutoTaskSpec(['b'], index_1.promiseToCallback(function (b) {
            return new Promise(function (resolve) {
                resolve(b + 2);
            });
        })),
        d: index_1.makeAsyncAutoTaskSpec(['c'], index_1.promiseToCallback(function (c) {
            return c + 4;
        })),
        e: index_1.makeAsyncAutoTaskSpecP(['c', 'd'], function (c, d) {
            return c + d;
        })
    };
    return Promise.all([
        index_1.asyncAutoPromise(autoStruct, 9, 'e')
            .then(function (e) {
            t.is(e, 12);
        }).catch(function (e) {
            t.fail();
        }),
        index_1.asyncAutoPromise(autoStruct, 'e')
            .then(function (e) {
            t.is(e, 12);
        }).catch(function (e) {
            t.fail();
        }),
    ]).then(function (ar) { }); // bit wierd the final `.then()` needing to be here...
});
ava_1.default('asyncAutoPromise function test', function (t) {
    return Promise.all([
        index_1.asyncAutoPromise({ a: function (next) { next(null, 4); }, }, 9, function (ob) { return ob.a; }).then(function (a) {
            t.is(a, 4);
        }).catch(function (e) {
            t.fail();
        }),
        index_1.asyncAutoPromise({ a: function (next) { next(null, 4); }, }, function (ob) { return ob.a + 1; }).then(function (a) {
            t.is(a, 5);
        }).catch(function (e) {
            t.fail();
        })
    ]).then(function (ar) { }); // bit wierd the final `.then()` needing to be here...
});
ava_1.default('asyncAutoPromise failure test', function (t) {
    return index_1.asyncAutoPromise({ a: function (next) { next(new Error('A Fail')); }, }, 9, 'a').then(function (e) {
        t.fail();
    }).catch(function (e) {
        t.is(e.message, 'A Fail');
    });
});
//# sourceMappingURL=data:application/json;base64,